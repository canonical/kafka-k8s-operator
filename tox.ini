# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
application = kafka-k8s
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/kafka
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
allowlist_externals =
    /bin/bash
    poetry
    tests/integration/retry.sh
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
    RETRIES=3
    charm: TEST_FILE=test_charm.py
    provider: TEST_FILE=test_provider.py
    scaling: TEST_FILE=test_scaling.py
    password-rotation: TEST_FILE=test_password_rotation.py
    tls: TEST_FILE=test_tls.py
    tls-complex: TEST_FILE=test_tls_complex.py
    refresh: TEST_FILE=test_refresh.py
    ha: TEST_FILE=ha/test_ha.py
    ha-controller: TEST_FILE=ha/test_ha_controller.py
    kraft: TEST_FILE=test_kraft.py
    kraft-tls: TEST_FILE=test_kraft.py
    kraft-tls: TLS=enabled
    balancer-single: DEPLOYMENT=single
    balancer-multi: DEPLOYMENT=multi

pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
deps =
    poetry

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install --only fmt
    poetry run ruff check --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only lint
    poetry run codespell {tox_root} \
        --skip {tox_root}/.git \
        --skip {tox_root}/.tox \
        --skip {tox_root}/build \
        --skip {tox_root}/docs \
        --skip {tox_root}/lib \
        --skip {tox_root}/tests/integration/*/lib \
        --skip {tox_root}/venv \
        --skip {tox_root}/tests/integration/app-charm/lib/charms/data_platform_libs/v0/data_interfaces.py \
        --skip {tox_root}/.mypy_cache \
        --skip {tox_root}/icon.svg \
	    --skip {tox_root}/poetry.lock \
        --skip {tox_root}/tests/unit/test_ssl_principal_mapping.py

    poetry run codespell {[vars]lib_path}

    poetry run ruff check {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

    poetry install --with lint
    poetry run pyright

[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry run coverage run --source={[vars]src_path} -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report
    poetry run coverage xml


[testenv:integration]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --no-root --with integration
    poetry run pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/


[testenv:integration-{charm,kraft,kraft-tls,provider,scaling,password-rotation,tls,tls-complex,refresh,ha,ha-controller}]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    TLS
commands =
    poetry install --with integration
    poetry run pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/{env:TEST_FILE}

[testenv:integration-balancer-{single,multi}]
description = Run balancer tests
pass_env =
    {[testenv]pass_env}
    CI
commands =
    poetry install --with integration
    poetry run pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_balancer.py
